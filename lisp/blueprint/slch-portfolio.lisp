#+nil
(eval-when (:compile-toplevel :load-toplevel :execute)
  (push #p"h:/My Documents/programming/lisp/lib/" asdf:*central-registry*)
  (asdf:oos 'asdf:load-op 'oam-util))
#+nil
(let ((connection-specs '((:a-pav
                           :driver "{SQL Native Client}"
                           :server "nx3036"
                           :uid "mgr"
                           :pwd "pavsystem" :adaptiv)
                          (:a-uat
                           :driver "{SQL Native Client}"
                           :server "nx3183"
                           :uid "mgr"
                           :pwd "uatsystem" :adaptiv)
                          (:a-st
                           :driver "{SQL Native Client}"
                           :server "nx3073"
                           :uid "mgr"
                           :pwd "NX3073" :adaptiv)
                          (:a-it
                           :driver "{SQL Native Client}"
                           :server "nx3038"
                           :uid "mgr"
                           :pwd "itsystem" :adaptiv))))
  (defun connect-to (server)
    (apply #'plain-odbc:connect-generic (cdr (assoc server connection-specs)))))

(let ((ccy :chf)
      (y-chf '#.(sort '((1 0.04)
                        (92 0.11167)
                        (183 0.21)
                        (365  0.315326683707862)
                        (730  0.553239099417388)
                        (1095  0.82805502932899)
                        (1460  1.10058916390721)
                        (1825  1.26240617698717)
                        (2190  1.45392065080292)
                        (2555  1.59075746557954)
                        (2920  1.73597614562233)
                        (3285  1.84997203043322)
                        (3650 1.94226509986295)
                        (4380 2.08841321529084)
                        (5475 2.2104384811096)
                        (7300 2.24930111845233)
                        (9125 2.18259587595232)
                        (10950 2.13234983571583)
                        (14600 2.15522421778436))
                      #'< :key #'car))
      (y-eur '#.(sort '((1     0.542)
                        (92    0.767)
                        (183   1.041)
                        (730   1.37867039064967)
                        (1095  1.61368573434349)
                        (1460  1.90605734953472)
                        (1825  2.07969070617989)
                        (2555  2.47688321741234)
                        (2920  2.65288668337336)
                        (3285  2.79271665635951)
                        (3650  2.90749265174011)
                        (5475  3.27222823744661)
                        (7300  3.35447401495073)
                        (9125  3.28078014314283)
                        (10950 3.22767951531881)
                        (365   1.15305587283771)
                        (2190  2.31057277182648)
                        (4380  3.09854254463583)
                        (14600 3.19932975833362))
                      #'< :key #'car))
      (y-usd '#.(sort '((1  0.30563)
                        (92  0.53394)
                        (183  0.7525)
                        (730  1.00680688667319)
                        (1095  1.37226245626569)
                        (1460  1.80655307114539)
                        (1825  2.05986863692771)
                        (2555  2.58065118749862)
                        (2920  2.78471914910404)
                        (3285  2.94327170707611)
                        (3650 3.0702343818751)
                        (5475 3.46535387076218)
                        (7300 3.6442068082617)
                        (9125 3.7132770972114)
                        (10950 3.75870762681712)
                        (365  0.710585622692337)
                        (2190  2.36504828491492)
                        (4380 3.26974056333657)
                        (14600 3.80675161497256))
                      #'< :key #'car))
      (y-gbp '#.(sort '((1  0.54875)
                        (92  0.73031)
                        (183  1.01827)
                        (730  1.4223)
                        (1095  1.7975)
                        (1460  2.1475)
                        (1825  2.45)
                        (2555  2.935)
                        (2920  3.115)
                        (3285  3.2668)
                        (3650 3.3895)
                        (5475 3.7735)
                        (7300 3.8575)
                        (9125 3.8645)
                        (10950 3.8545)
                        (2190  2.71)
                        (4380 3.5845)
                        (365  1.13))
                      #'< :key #'car))
      (spreads '((CHFA 92    14.333)
                 (CHFA 183    23.01)
                 (CHFA 365    31.81)
                 (CHFA 730    32.97)
                 (CHFA 1095    44.56)
                 (CHFA 1460    55.17)
                 (CHFA 1825    54.37)
                 (CHFA 2555    50.91)
                 (CHFA 2920    49.36)
                 (CHFA 3285    41.69)
                 (CHFAA 92   7.833)
                 (CHFAA 183   9.41)
                 (CHFAA 365   7.3)
                 (CHFAA 730   -8.83)
                 (CHFAA 1095   -11.95)
                 (CHFAA 1460   -8.16)
                 (CHFAA 1825   -7.87)
                 (CHFAA 2555   -10.05)
                 (CHFAA 3650  -6.6)
                 (CHFAA 2920   -8.77)
                 (CHFAA 3285   -8.41)
                 (CHFAAA 92  1.353)
                 (CHFAAA 183  -5.23)
                 (CHFAAA 365  -2.84)
                 (CHFAAA 730  -10.0)
                 (CHFAAA 1095  -13.49)
                 (CHFAAA 1460  -11.0)
                 (CHFAAA 1825  -10.06)
                 (CHFAAA 2555  -11.62)
                 (CHFAAA 2920  -10.43)
                 (CHFAAA 3285  -10.07)
                 (CHFGOV 92  -1.207)
                 (CHFGOV 183  -8.56)
                 (CHFGOV 365  -14.4713828139438)
                 (CHFGOV 730  -21.569205508459)
                 (CHFGOV 1095  -32.3819447644872)
                 (CHFGOV 1460  -38.5338017339163)
                 (CHFGOV 1825  -42.8307799856179)
                 (CHFGOV 2555  -45.0832331202764)
                 (CHFGOV 3650 -43.8289160609441)
                 (CHFGOV 5475 -40.3124770194575)
                 (CHFGOV 7300 -39.2239794639479)
                 (CHFGOV 10950 -30.4607963605535)
                 (CHFGOV 2920  -43.8643338517668)
                 (CHFGOV 3285  -43.5393676549519)
                 (CHFGOV 9125 -32.664779028956)
                 (CHFGOV 14600 7.51361863037703)
                 (CHFLO 3650  50.0)
                 (CHFLO 5475  50.0)
                 (CHFLO 365   50.0)
                 (CHFLO 7300  50.0)
                 (CHFLO 9125  50.0)
                 (CHFLO 730   50.0)
                 (CHFLO 10950  50.0)
                 (CHFLO 92   50.0)
                 (CHFLO 1095   50.0)
                 (CHFLO 1460   50.0)
                 (CHFLO 1825   50.0)
                 (CHFLO 183   50.0)
                 (CHFLO 2555   50.0)
                 (CHFLO 2920   50.0)
                 (CHFLO 3285   50.0)
                 (CHFMGE 92  81.0)
                 (CHFMGE 183  81.0)
                 (CHFMGE 365  81.0)
                 (CHFMGE 730  81.0)
                 (CHFMGE 1095  81.0)
                 (CHFMGE 1460  81.0)
                 (CHFMGE 1825  81.0)
                 (CHFMGE 2555  81.0)
                 (CHFMGE 2920  81.0)
                 (CHFMGE 3285  81.0)
                 (CHFMGE 3650 81.0)
                 (CHFMGE 5475 81.0)
                 (CHFMGE 7300 81.0)
                 (CHFMGE 9125 81.0)
                 (CHFMGE 10950 81.0)
                 (CHFHC 1825   250.6285)
                 (EURA 92    74.7)
                 (EURA 183    60.2)
                 (EURA 365    75.6)
                 (EURA 730    88.0)
                 (EURA 1095    94.2)
                 (EURA 1460    99.97)
                 (EURA 1825    106.08)
                 (EURA 2555    115.42)
                 (EURA 3650   134.47)
                 (EURA 5475   118.6)
                 (EURA 7300   117.87)
                 (EURA 10950   176.65)
                 (EURA 2920    117.55)
                 (EURA 3285    121.85)
                 (EURA 9125   153.45)
                 (EURAA 92   60.7)
                 (EURAA 183   45.7)
                 (EURAA 365   51.5)
                 (EURAA 730   61.1)
                 (EURAA 1095   61.7)
                 (EURAA 1460   71.07)
                 (EURAA 1825   80.08)
                 (EURAA 2555   84.42)
                 (EURAA 3650  88.37)
                 (EURAA 5475  88.9)
                 (EURAA 2920   83.65)
                 (EURAA 3285   86.05)
                 (EURAAA 92  25.5)
                 (EURAAA 183  6.5)
                 (EURAAA 365  8.4)
                 (EURAAA 730  32.3)
                 (EURAAA 1095  47.4)
                 (EURAAA 1460  51.07)
                 (EURAAA 1825  56.78)
                 (EURAAA 2555  59.62)
                 (EURAAA 3650 65.57)
                 (EURAAA 5475 61.0)
                 (EURAAA 7300 77.77)
                 (EURAAA 2920  58.65)
                 (EURAAA 3285  59.95)
                 (EURAAA 9125 81.75)
                 (EURBBB 92  102.7)
                 (EURBBB 183  87.3)
                 (EURBBB 365  99.8)
                 (EURBBB 730  116.0)
                 (EURBBB 1095  129.1)
                 (EURBBB 1460  138.97)
                 (EURBBB 1825  148.38)
                 (EURBBB 2555  166.62)
                 (EURBBB 3650 186.17)
                 (EURBBB 5475 227.5)
                 (EURBBB 2920  172.35)
                 (EURBBB 3285  181.75)
                 (EURGOV 92  -51.7)
                 (EURGOV 183  -67.2)
                 (EURGOV 365  -68.1844669681847)
                 (EURGOV 730  -71.7274261887536)
                 (EURGOV 1095  -55.853977558317)
                 (EURGOV 1460  -39.9589303070702)
                 (EURGOV 1825  -31.0973921709333)
                 (EURGOV 2555  -17.3768509146181)
                 (EURGOV 3650 -5.77871770541968)
                 (EURGOV 5475 2.13452070702717)
                 (EURGOV 7300 11.4480676578313)
                 (EURGOV 10950 33.6670289327898)
                 (EURGOV 2920  -12.1044297613665)
                 (EURGOV 3285  -8.39798624745591)
                 (EURGOV 9125 24.9080247937663)
                 (EURGOV 14600 44.4208082150677)
                 (EURHC 1825   250.6285)
                 (USDA 92    50.606)
                 (USDA 183    36.75)
                 (USDA 365    62.5)
                 (USDA 730    80.85)
                 (USDA 1095    93.85)
                 (USDA 1460    117.35)
                 (USDA 1825    117.2)
                 (USDA 2555    141.44)
                 (USDA 3650   250.6285)
                 (USDA 5475   197.4)
                 (USDA 7300   200.65)
                 (USDA 10950   192.65)
                 (USDA 2920    145.7)
                 (USDA 3285    155.2)
                 (USDA 9125   193.85)
                 (USDAA 92   31.606)
                 (USDAA 183   15.75)
                 (USDAA 365   36.5)
                 (USDAA 730   54.85)
                 (USDAA 1095   66.85)
                 (USDAA 1460   82.35)
                 (USDAA 1825   81.2)
                 (USDAA 2555   99.44)
                 (USDAA 3650  116.85)
                 (USDAA 5475  130.4)
                 (USDAA 7300  149.65)
                 (USDAA 10950  132.65)
                 (USDAA 2920   102.7)
                 (USDAA 3285   110.2)
                 (USDAA 9125  144.85)
                 (USDBBB 92  128.606)
                 (USDBBB 183  113.75)
                 (USDBBB 365  139.5)
                 (USDBBB 730  154.85)
                 (USDBBB 1095  174.85)
                 (USDBBB 1460  187.35)
                 (USDBBB 1825  182.2)
                 (USDBBB 2555  197.44)
                 (USDBBB 3650 217.85)
                 (USDBBB 5475 234.4)
                 (USDBBB 7300 242.65)
                 (USDBBB 10950 238.65)
                 (USDBBB 2920  198.7)
                 (USDBBB 3285  211.2)
                 (USDBBB 9125 237.85)
                 (USDGOV 92  -33.074)
                 (USDGOV 183  -50.45)
                 (USDGOV 365  -39.4121164950699)
                 (USDGOV 730  -34.3621579686526)
                 (USDGOV 1095  -33.5852636247201)
                 (USDGOV 1460  -29.3885696238443)
                 (USDGOV 1825  -27.4992186461483)
                 (USDGOV 2555  -15.3233064752651)
                 (USDGOV 3650 4.31478157765876)
                 (USDGOV 5475 19.9288615748387)
                 (USDGOV 7300 21.7716561326742)
                 (USDGOV 10950 19.1024014881958)
                 (USDGOV 2920  -6.81652513525668)
                 (USDGOV 3285  -0.501158571631251)
                 (USDGOV 9125 21.1250741990248)
                 (USDGOV 14600 27.4811599471414)
                 (USDHY 92   336.606)
                 (USDHY 183   315.75)
                 (USDHY 365   334.5)
                 (USDHY 730   362.85)
                 (USDHY 1095   377.85)
                 (USDHY 1460   390.35)
                 (USDHY 1825   400.2)
                 (USDHY 2555   424.44)
                 (USDHY 3650  447.85)
                 (USDHY 5475  440.4)
                 (USDHY 7300  447.65)
                 (USDHY 10950  443.65)
                 (USDHY 2920   429.7)
                 (USDHY 3285   441.2)
                 (USDHY 9125  443.85)))
      (fx '((:chf (:eur . 1.321) (:usd . 1.0778) (:gbp . 1.61271214))))
      (fi '((:cash (:cp :na :dur 0 :ir 0)
             (:ccy :eur :mv 387)
             (:ccy :usd :mv 164)
             (:ccy :gbp :mv -10)
             (:ccy :chf :mv #.(- 2188 222 -10 164 387)))
            (:money-market (:cp :na :ir 0)
             (:ccy :chf :mv -480 :dur 0.1))
            (:gov-bond (:dur 12.9)
             (:ccy :eur :mv 9915 :cp :gov :ir 0.03)
             (:ccy :usd :mv 1939 :cp :a :ir 0.045)
             (:ccy :gbp :mv 1350 :cp :gov :ir 0.03)
             (:ccy :chf :mv #.(- 29635 1492 1350 1939 9915) :cp :gov :ir 0.02))
            (:pfandbrief (:dur 8 :cp :gov)
             (:ccy :eur :mv 267 :ir 0.03)
             (:ccy :chf :mv #.(- 2224 267)))
            (:corp-bond (:cp :bbb :dur 8.3)
             (:ccy :eur :mv 6188)
             (:ccy :usd :mv 10841)
             (:ccy :gbp :mv 430)
             (:ccy :chf :mv #.(- 21495 6188 10841 430 90)))
            (:loan nil
             (:ccy :chf :mv 228 :dur 5.6 :cp :bbb))
            (:mortgage nil
             (:ccy :chf :mv 4606 :dur 3.6 :cp :bbb)))))
  (defun fx (from to &optional stop)
    (or (cdr (assoc from (cdr (assoc to fx))))
        (unless stop (/ (fx to from)))))
  (labels ((get-spread-grid (spread)
             (sort (mapcan #'(lambda (item)
                               (when (eql (car item) spread)
                                 (list (cdr item))))
                           spreads)
                   #'< :key #'car))
           (lin-int (x grid)
             (destructuring-bind (lo . hi) (loop with prev
                                              for cur in grid
                                              do (if (< x (car cur))
                                                     (return (cons prev cur))
                                                     (setq prev cur))
                                              finally (return (cons cur nil)))
               (cond ((null lo) (cadr hi))
                     ((null hi) (cadr lo))
                     ((let* ((x-lo (car lo))
                             (y-lo (cadr lo))
                             (x-hi (car hi))
                             (y-hi (cadr lo))
                             (l (/ (- x x-lo) (- x-hi x-lo)))
                             (l-1 (1- l)))
                        (+ (* y-lo l-1)
                           (* y-hi l)))))))
           (get-zero-grid (ccy)
             (ecase ccy
               (:chf y-chf)(:eur y-eur)(:usd y-usd)(:gbp y-gbp))))
    
    (defun get-disc-fact (ccy spd days)
      (let ((spd-grid (get-spread-grid (intern (format nil "~A~A" ccy spd)))))
        (expt (/ (1+ (/ (+ (if spd-grid
                               (/ (lin-int days spd-grid) 100)
                               0)
                           (lin-int days (get-zero-grid ccy)))
                        100)))
              (/ days 365))))))



(defclass bond ()
  ((nominal :initarg :nominal)
   (maturity :initarg :maturity)
   (ccy :initarg :ccy)
   (float-rate-id :initarg :float-rate-id)
   (float-rate-mult :initarg :float-rate-mult)
   (fix-rate :initarg :fix-rate)
   (pay-freq :initarg :pay-freq)
   (basis :initarg :basis)))

(defgeneric compute-npv (instrument &key rating &allow-other-keys))

(defmethod compute-npv ((instrument bond) &key (rating :gov) (cnir 0))
  (with-slots (ccy nominal maturity fix-rate pay-freq) instrument
      (fst-cp (nth-value 1 (floor mat-day period))))
  (* nominal (+ (get-disc-fact ccy spd mat-day)
                (* rate
                   (loop ;with prev = 0  ;(- fst-cp 365) ;; clean vs dirty
                      for cur from fst-cp upto mat-day by period
                      sum (* period (get-disc-fact ccy spd cur)))
                   1/365))))

(defun compute-$-dur (ccy spd mat-day nominal rate
                         &aux (fst-cp (nth-value 1 (floor mat-day 365))))
  (/ (* nominal (+ (* mat-day (get-disc-fact ccy spd mat-day))
                   (* rate
                      (loop with prev = 0 ;(- fst-cp 365) ;; clean vs dirty
                         for cur from fst-cp upto mat-day by 365
                         sum (* cur (- cur prev) (get-disc-fact ccy spd cur)))
                      1/365))
        1/365)))

(defun compute-bond-dur-dm (ccy spd mat-day nominal rate)
  (let* ((h 1.0d-4)
         (2h (* 2 h)))
    (/ (- (compute-bond-dur ccy spd (+ mat-day h) nominal rate)
          (compute-bond-dur ccy spd (- mat-day h) nominal rate))
       2h)))


(defun solve (ccy spd ir mv dur)
  (let* ((m (loop with m = #.(* 15 365)
               repeat 20
               do (setq m (- m (let* ((eps 1.0d-4) (-eps (- eps))
                                      (dur* (compute-bond-dur ccy spd m 1000 ir))
                                      (dur-dm (compute-bond-dur-dm ccy spd m 1000 ir)))
                                 (if (< -eps dur-dm eps)
                                     (- m (* 10 (signum (* dur* dur-dm))))
                                     (/ (-  dur* dur)
                                        dur-dm)))))
               finally (return m)))
         (n (/ mv (compute-bond-npv ccy spd m 1 ir))))
    (format t "~&Maturity = ~A days~&Nominal = ~A~&MV  = ~A~&Dur = ~A"
            m n
            (compute-bond-npv ccy spd m n ir)
            (compute-bond-dur ccy spd m n ir))))
